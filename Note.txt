Push_swap has a stack that is passed through argc-argv, it should be a string
containing multiple integers. It's objective is to sort all numbers from lower
to higher in the MINIMUM number of movements. 

	Use the following operations:
	
A	sa: (swap a) Swaps the first 2 elements at the top of stack a.
				Do nothing if there's only one or no elements.
E	sb: (swap b) Swaps the first 2 elements at the top of stack b.
				Do nothing if there's only one or no elements.
I	ss: sa && sb at the same time.
		
B	pa: (push a) Take the first element at the top of b and put it
			at the top of a.
				Do nothing if b is empty.
F	pb: (push b) Take the first element at the top of a and put it
			at the top of b.
				Do nothing if a is empty.

C	ra: (rotate a) Shift up all elements of stack a by 1.
				The first element becomes the last one.
G	rb: (rotate b) Shift up all elements of stack b by 1.
				The first element becomes the last one.
J	rr: ra && rb at the same time.

D	rra: (reverse rotate a) Shift down all elements of stack a by 1.
				The last element becomes the first one.
H	rrb: (reverse rotate b) Shift down all elements of stack b by 1.
				The last element becomes the first one.
K	rrr: rra && rrb at the same time.

External functions allowed:
		read, write, malloc, free, exit
		ft_printf, libft

----------------------------------------------------------------------------------

IN ORDER TO COMPILE WITH A .a LIBRARY:
	Include the header file of the library including it's directory.
	Compile all .c files and the .a library together.
	Enjoy

----------------------------------------------------------------------------------

"+0" || "-0" explota
4 5 1 2 3	explota
4 1 3 2 5
en algunos casos de 100 explota
2 args explota
"MAX_INT" explota
