	Push_swap has a stack that is passed through argc-argv, it should be a string
containing multiple integers. It's objective is to sort all numbers from lower
to higher in the MINIMUM number of movements. 

	Use the following operations:
	
	sa: (swap a) Swaps the first 2 elements at the top of stack a.
				Do nothing if there's only one or no elements.
		sb: (swap b) Swaps the first 2 elements at the top of stack b.
				Do nothing if there's only one or no elements.
		ss: sa && sb at the same time.
		
		pa: (push a) Take the first element at the top of b and put it
			at the top of a.
				Do nothing if b is empty.
		pb: (push b) Take the first element at the top of a and put it
			at the top of b.
				Do nothing if a is empty.

		ra: (rotate a) Shift up all elements of stack a by 1.
				The first element becomes the last one.
		rb: (rotate b) Shift up all elements of stack b by 1.
				The first element becomes the last one.
		rr: ra && rb at the same time.

		rra: (reverse rotate a) Shift down all elements of stack a by 1.
				The last element becomes the first one.
		rrb: (reverse rotate b) Shift down all elements of stack b by 1.
				The last element becomes the first one.
		rrr: rra && rrb at the same time.

External functions allowed:
		read, write, malloc, free, exit
		ft_printf, libft

----------------------------------------------------------------------------------

IN ORDER TO COMPILE WITH A .a LIBRARY:
	Include the header file of the library including it's directory.
	Compile all .c files and the .a library together.
	Enjoy

----------------------------------------------------------------------------------

	Parse Stack, it comes as char * in argv. Then allocate memory for t_list
sizeof Stack. Then move everything and good luck.

	To parse use ft_atoi... There will be an argument for each number of the
stack. 
	First, calculate the whole size of the list, then, allocate memory for the
whole t_list and allocate each value correctly. Remember that since we'll be
using two stacks, two stacks must be allocated, A && B.
	Then >> Check for the lowest number and if the numbers above it can be
moved to the other stack.
